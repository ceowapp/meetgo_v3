apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: 'com.google.gms.google-services'

import org.apache.tools.ant.taskdefs.condition.Os
import java.util.regex.Matcher
import java.util.regex.Pattern

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

def enableHermes = project.hasProperty("hermesEnabled") && project.hermesEnabled.toBoolean()

project.ext.react = [
   enableHermes: enableHermes,
]

project.ext.envConfigFiles = [
        productiondebug: ".env.production",
        productionrelease: ".env.production",
        developDebug: ".env.develop",
        developRelease: ".env.develop",
]

project.ext.vectoricons = [
   iconFontNames: [ 'MaterialCommunityIcons.ttf' ]
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false
def enableSeparateBuildPerCPUArchitecture = false
def jscFlavor = 'org.webkit:android-jsc:+'

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "app.meetgo.vn"
    defaultConfig {
        applicationId "app.meetgo.vn"
        minSdkVersion 24
        targetSdkVersion 34
        compileSdkVersion 35
        versionCode 13
        versionName "3.0.0"
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('RELEASE_STORE_FILE')) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_KEY_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_ALIAS_PASSWORD
            }
        }
    }

    flavorDimensions 'env'
    productFlavors {
        develop {
            dimension 'env'
            signingConfig signingConfigs.debug
            resValue "string", "admobAppId", project.env.get("ADMOB_APP_ID")
            resValue "string", "CodePushDeploymentKey", project.env.get("DEPLOYMENT_KEY_ANDROID")
            resValue "string", "CodePushServerUrl", project.env.get("CODE_PUSH_SERVER_URL")
        }
        production {
            dimension 'env'
            signingConfig signingConfigs.release
            resValue "string", "admobAppId", project.env.get("ADMOB_APP_ID")
            resValue "string", "CodePushDeploymentKey", project.env.get("DEPLOYMENT_KEY_ANDROID")
            resValue "string", "CodePushServerUrl", project.env.get("CODE_PUSH_SERVER_URL")
        }
    }

    buildTypes {
        debug {
            signingConfig null
            productFlavors.develop.signingConfig signingConfigs.debug
            productFlavors.production.signingConfig signingConfigs.release
        }
        release {
            productFlavors.develop.signingConfig signingConfigs.debug
            productFlavors.production.signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter("ABI")
            if (abi != null) {
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }
        }
        
        def flavorName = variant.productFlavors[0].name
        def buildTypeName = variant.buildType.name
        copy {
            if(flavorName == getCurrentFlavor() && buildTypeName == getCurrentBuildType()) {
                println "Copy firebase $flavorName google-services.json"
                from "src/$flavorName"
                include "google-services.json"
                into "."
            }
        }
    }
}

def getCurrentBuildType() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    if (tskReqStr.contains("Release")) {
        println "getCurrentBuildType release"
        return "release"
    } else if (tskReqStr.contains("Debug")) {
        println "getCurrentBuildType debug"
        return "debug"
    }

    println "NO MATCH FOUND"
    return ""
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if( tskReqStr.contains( "assemble" ) )
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if( tskReqStr.contains( "bundle" ) )
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher( tskReqStr )

    if( matcher.find() )
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation platform('com.google.firebase:firebase-bom:32.2.2')
    implementation("com.google.android.gms:play-services-ads:24.2.0")

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    
    implementation project(':react-native-config')

    implementation "com.facebook.fresco:animated-gif:2.6.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    if (enableHermes) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}